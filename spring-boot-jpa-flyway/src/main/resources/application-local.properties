server.port=8087
spring.datasource.url=jdbc:mysql://127.0.0.1:8023/tutorial_flyway?serverTimezone=Asia/Shanghai&Unicode=true&characterEncoding=utf-8
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=123456
# create：每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。[删除-创建-操作]
# create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。[删除-创建-操作-再删除]
# update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。[没表-创建-操作 | 有表-更新没有的属性列-操作]
# validate：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。[启动验证表结构，验证不成功，项目启动失败]
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
# 让注解生效(表设别名,字段设置别名)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# 配置数据库引擎为InnoDB
# 下面这行已经没有作用了
# spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
#hibernate.dialect.storage_engine=innodb
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=4
spring.datasource.hikari.maximum-pool-size=8
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=DatebookHikariCP
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=300000
spring.datasource.hikari.connection-test-query=SELECT 1
#logging.level.root=debug
# ---------------------------------------------------------------------------------------------------
spring.flyway.baseline-version=1

#spring.flyway.driver-class-name=${spring.datasource.driver-class-name}
#spring.flyway.url=jdbc:mysql://127.0.0.1:8023/flyway?serverTimezone=Asia/Shanghai&Unicode=true&characterEncoding=utf-8
#spring.flyway.user=${spring.datasource.username}
#spring.flyway.password=${spring.datasource.password}
# ---------------------------------------------------------------------------------------------------
# Description to tag an existing schema with when applying a baseline.
# 默认值:<< Flyway Baseline >> .没看懂
#spring.flyway.baseline-description=
#Whether to automatically call baseline when migrating a non-empty schema.
#默认值: false.没看懂
#spring.flyway.baseline-on-migrate=
#
# Version to tag an existing schema with when executing baseline.在执行基线时标记现有模式的版本。默认值 1
#spring.flyway.baseline-version=1
#
# Whether to batch SQL statements when executing them. Requires Flyway Teams.
#spring.flyway.batch=
#
# Migrations that Flyway should consider when migrating or undoing. When empty all available migrations are considered. Requires Flyway Teams.
#spring.flyway.cherry-pick=
#
# Whether to disable cleaning of the database. 是否关闭清理数据库功能。 默认值:false
#spring.flyway.clean-disabled
#
#Whether to disable cleaning of the database.false
#spring.flyway.clean-on-validation-error=false
#
#Whether to disable cleaning of the database.
#false
#spring.flyway.clean-on-validation-error=
#
#Maximum number of retries when attempting to connect to the database.
#0
#spring.flyway.connect-retries
#
#Whether Flyway should attempt to create the schemas specified in the schemas property.
#true
#spring.flyway.create-schemas=
#
#Default schema name managed by Flyway (case-sensitive).
#spring.flyway.default-schema
#
#Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
#spring.flyway.driver-class-name
#
#Whether to enable flyway.true
#spring.flyway.enabled
#
#
#Encoding of SQL migrations.UTF-8
#spring.flyway.encoding=
#
#Rules for the built-in error handling to override specific SQL states and error codes. Requires Flyway Teams.
#spring.flyway.error-overrides
#
#
#Whether to group all pending migrations together in the same transaction when applying them.
#false
#spring.flyway.group
#
#
#Whether to ignore future migrations when reading the schema history table.
#true
#spring.flyway.ignore-future-migrations
#
#
#Whether to ignore ignored migrations when reading the schema history table.
#false
#spring.flyway.ignore-ignored-migrations
#
#
#Whether to ignore missing migrations when reading the schema history table.
#false
#spring.flyway.ignore-missing-migrations
#
#
#Whether to ignore pending migrations when reading the schema history table.
#false
#spring.flyway.ignore-pending-migrations
#
#SQL statements to execute to initialize a connection immediately after obtaining it.
#spring.flyway.init-sqls
#
#Username recorded in the schema history table as having applied the migration.
#spring.flyway.installed-by
#
#Properties to pass to the JDBC driver. Requires Flyway Teams.
#spring.flyway.jdbc-properties.*
#
#Licence key for Flyway Teams.
#spring.flyway.license-key
#
#Locations of migrations scripts. Can contain the special "{vendor}" placeholder to use vendor-specific locations. [classpath:db/migration]
#spring.flyway.locations
#
#Maximum number of retries when trying to obtain a lock.
#50
#spring.flyway.lock-retry-count
#
#Whether to allow mixing transactional and non-transactional statements within the same migration.
#false
#spring.flyway.mixed
#
#Path of the Oracle Kerberos cache file. Requires Flyway Teams.
#spring.flyway.oracle-kerberos-cache-file
#
#Path of the Oracle Kerberos config file. Requires Flyway Teams.
#spring.flyway.oracle-kerberos-config-file
#
#Whether to enable support for Oracle SQL*Plus commands. Requires Flyway Teams.
#spring.flyway.oracle-sqlplus
#
#Whether to issue a warning rather than an error when a not-yet-supported Oracle SQL*Plus statement is encountered. Requires Flyway Teams.
#spring.flyway.oracle-sqlplus-warn
#
#Whether to allow migrations to be run out of order.
#false
#spring.flyway.out-of-order
#
#Whether Flyway should output a table with the results of queries when executing migrations. Requires Flyway Teams.
#spring.flyway.output-query-results
#
#Login password of the database to migrate.
#spring.flyway.password
#
#Prefix of placeholders in migration scripts.
#${
#spring.flyway.placeholder-prefix
#
#Perform placeholder replacement in migration scripts.
#true
#spring.flyway.placeholder-replacement
#
#spring.flyway.placeholder-suffix
#}
#Suffix of placeholders in migration scripts.
#
#Placeholders and their replacements to apply to sql migration scripts.
#spring.flyway.placeholders.*
#
#File name prefix for repeatable SQL migrations.
#R
#spring.flyway.repeatable-sql-migration-prefix
#
#Scheme names managed by Flyway (case-sensitive).
#spring.flyway.schemas
#
#Whether to skip default callbacks. If true, only custom callbacks are used.
#false
#spring.flyway.skip-default-callbacks
#
#spring.flyway.skip-default-resolvers
#false
#Whether to skip default resolvers. If true, only custom resolvers are used.
#
#
#Whether Flyway should skip executing the contents of the migrations and only update the schema history table. Requires Flyway teams.
#spring.flyway.skip-executing-migrations
#
#File name prefix for SQL migrations.
#V
#spring.flyway.sql-migration-prefix
#
#File name separator for SQL migrations.
#__
#spring.flyway.sql-migration-separator
#
#
#File name suffix for SQL migrations.
#[.sql]
#spring.flyway.sql-migration-suffixes
#
#
#Whether to stream SQL migrations when executing them. Requires Flyway Teams.
#spring.flyway.stream
#
#Name of the schema history table that will be used by Flyway.
#flyway_schema_history
#spring.flyway.table
#
#Tablespace in which the schema history table is created.
#Ignored when using a database that does not support tablespaces. Defaults to the default tablespace of the connection used by Flyway.
#spring.flyway.tablespace
#
#
#Target version up to which migrations should be considered.
#spring.flyway.target
#
#
#JDBC url of the database to migrate. If not set, the primary configured data source is used.
#spring.flyway.url
#
#
#Login user of the database to migrate.
#spring.flyway.user
#
#
#Whether to validate migrations and callbacks whose scripts do not obey the correct naming convention.
#false
#spring.flyway.validate-migration-naming
#
#
#Whether to automatically call validate when performing a migration.
#true
#spring.flyway.validate-on-migrate
#
#
#Comma-separated list of paths to secrets that contain Flyway configurations. This must start with the name of the engine followed by '/data/' and end with the name of the secret. The resulting form is '{engine}/data/{path}/{to}/{secret_name}'. Requires Flyway teams.
#spring.flyway.vault-secrets
#
#
#Vault token required to access secrets. Requires Flyway teams.
#spring.flyway.vault-token
#
#
#REST API URL of the Vault server. Requires Flyway teams.
#spring.flyway.vault-url
#
#flyway.baseline-description对执行迁移时基准版本的描述.
#flyway.baseline-on-migrate当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认false.
#flyway.baseline-version开始执行基准迁移时对现有的schema的版本打标签，默认值为1.
#flyway.check-location检查迁移脚本的位置是否存在，默认false.
#flyway.clean-on-validation-error当发现校验错误时是否自动调用clean，默认false.
#flyway.enabled是否开启flyway，默认true.
#flyway.encoding设置迁移时的编码，默认UTF-8.
#flyway.ignore-failed-future-migration当读取元数据表时是否忽略错误的迁移，默认false.
#flyway.init-sqls当初始化好连接时要执行的SQL.
#flyway.locations迁移脚本的位置，默认db/migration.
#flyway.out-of-order是否允许无序的迁移，默认false.
#flyway.password目标数据库的密码.
#flyway.placeholder-prefix设置每个placeholder的前缀，默认${.
#flyway.placeholder-replacementplaceholders是否要被替换，默认true.
#flyway.placeholder-suffix设置每个placeholder的后缀，默认}.
#flyway.placeholders.[placeholder name]设置placeholder的value
#flyway.schemas设定需要flyway迁移的schema，大小写敏感，默认为连接默认的schema.
#flyway.sql-migration-prefix迁移文件的前缀，默认为V.
#flyway.sql-migration-separator迁移脚本的文件名分隔符，默认__
#flyway.sql-migration-suffix迁移脚本的后缀，默认为.sql
#flyway.tableflyway使用的元数据表名，默认为schema_version
#flyway.target迁移时使用的目标版本，默认为latest version
#flyway.url迁移时使用的JDBC URL，如果没有指定的话，将使用配置的主数据源
#flyway.user迁移数据库的用户名
#flyway.validate-on-migrate迁移时是否校验，默认为true